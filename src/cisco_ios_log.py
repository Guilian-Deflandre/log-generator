import random
from log import *

class CiscoIOSLog(Log):
    """
    This class is used to generate logs simulating the ones generated by a Cisco
    device running Cisco IOS. From Cisco documentation:
        System log messages can contain up to 80 characters and a percent sign
        (%), which follows the optional sequence number or timestamp
        information, if configured. Messages are displayed in this format:
            seq no:timestamp: %facility-severity-MNEMONIC:description

    Here, the format used is the following:
        mm/dd hh:mm:ss: %facility-severity-MNEMONIC: description

    See: https://www.cisco.com/c/en/us/td/docs/routers/access/wireless/software-
        /guide/SysMsgLogging.html

    Attributes
    ----------
    _log_facility : list
        The facility code to which the message refers.
    _log_severity : dict
        Single-digit code from 0 to 7 that is the severity of the message mapped
        to a facility code.
    _log_mnemonic : dict
        Text string that uniquely describes the message mapped to a facility 
        code.

    Methods
    -------
    str()
        Generate a random log simulating one created by a Cisco device running
        IOS
    """

    _log_facility = ["SYS", "LINK", "LINEPROTO"]
    _log_severity = {
        "SYS": "5",
        "LINK": "3",
        "LINEPROTO": "5"
    }
    _log_mnemonic = {
        "SYS": "CONFIG_I",
        "LINK": "UPDOWN",
        "LINEPROTO": "UPDOWN"
    }

    def _generate_description_sys():
        """Generate a random description in accordance with a SYS facilty log.

        Parameters
        ----------
        /

        Returns
        -------
        string
            A description of a log of facility SYS.
        """

        return "Configured from console by console"
    
    def _generate_description_link():
        """Generate a random description in accordance with a LINK facilty log.

        Parameters
        ----------
        /

        Returns
        -------
        string
            A description of a log of facility LINK.
        """

        return "Interface GigabitEthernet0/" + str(random.randint(0, 3)) + \
               ", changed state to " + random.choice(["up", "down"])

    def _generate_description_lineproto():
        """Generate a random description in accordance with a LINEPROTO facilty
        log.

        Parameters
        ----------
        /

        Returns
        -------
        string
            A description of a log of facility LINEPROTO.
        """

        return "Line protocol on Interface GigabitEthernet0/" + \
               str(random.randint(0, 3)) + ", changed state to " + \
               random.choice(["up", "down"])

    _log_description = {
        "SYS": _generate_description_sys(),
        "LINK": _generate_description_link(),
        "LINEPROTO": _generate_description_lineproto()
    }
    
    def __init__(self) -> None:
        super().__init__("")

    def _generate_log(self):
        """Generate, without timestamp, a random log simulating one created by
        a Cisco device running IOS under the format:
            %facility-severity-MNEMONIC: description

        Parameters
        ----------
        /

        Returns
        -------
        string
            A description of a log of facility LINEPROTO.
        """

        facility = self._log_facility[
            random.randint(0, (len(self._log_facility)-1))]
        severity = self._log_severity[facility]
        mnemonic = self._log_mnemonic[facility]

        return facility + "-" + severity + "-" + mnemonic + ": " + \
               self._log_description[facility]

    def str(self):
        """Generate a random log simulating one created by a Cisco device
        running IOS under the format:
            mm/dd hh:mm:ss: %facility-severity-MNEMONIC: description

        Parameters
        ----------
        /

        Returns
        -------
        string
            A log such as the one create by a Cisco device running IOS.
        """

        return self.timestamp.strftime("*%b %d %H:%M:%S.%f")[:-3] + " " + \
               self._generate_log()
